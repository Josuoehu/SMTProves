(set-option :produce-models true)
(set-logic QF_UFLIA)
(declare-fun t0_0 () Int)
(declare-fun t1_0 () Int)
(declare-fun t2_0 () Int)
(declare-fun t3_0 () Int)
(declare-fun t4_0 () Int)
(declare-fun t5_0 () Int)
(declare-fun t6_0 () Int)
(declare-fun t7_0 () Int)
(declare-fun t8_0 () Int)
(declare-fun t9_0 () Int)
(declare-fun at (Int Int) Int)
(declare-fun board (Int Int Int Int) Bool)
(declare-fun capacity (Int Int) Int)
(declare-fun debark (Int Int Int Int) Bool)
(declare-fun distance (Int Int Int) Int)
(declare-fun fly (Int Int Int Int) Bool)
(declare-fun fuel (Int Int) Int)
(declare-fun in (Int Int) Int)
(declare-fun onboard (Int Int) Int)
(declare-fun refuel (Int Int) Bool)
(declare-fun seats (Int Int) Int)
(declare-fun plane1 () Int)
(declare-fun city1 () Int)
(declare-fun city2 () Int)
(declare-fun city3 () Int)
(declare-fun city4 () Int)
(declare-fun city5 () Int)
(declare-fun city6 () Int)
(declare-fun person1 () Int)
(declare-fun person2 () Int)
(declare-fun person3 () Int)
(declare-fun person4 () Int)
(declare-fun person5 () Int)
(declare-fun person6 () Int)
(assert (or (= t0_0 8) (= t0_0 9) (= t0_0 10) (= t0_0 11) (= t0_0 12) (= t0_0 13) ))
(assert (or (= t1_0 1) ))
(assert (or (= t2_0 2) (= t2_0 3) (= t2_0 4) (= t2_0 5) (= t2_0 6) (= t2_0 7) ))
(assert (or (= t3_0 8) (= t3_0 9) (= t3_0 10) (= t3_0 11) (= t3_0 12) (= t3_0 13) ))
(assert (or (= t4_0 1) ))
(assert (or (= t5_0 2) (= t5_0 3) (= t5_0 4) (= t5_0 5) (= t5_0 6) (= t5_0 7) ))
(assert (or (= t6_0 1) ))
(assert (or (= t7_0 2) (= t7_0 3) (= t7_0 4) (= t7_0 5) (= t7_0 6) (= t7_0 7) ))
(assert (or (= t8_0 2) (= t8_0 3) (= t8_0 4) (= t8_0 5) (= t8_0 6) (= t8_0 7) ))
(assert (or (= t9_0 1) ))
(assert (= plane1 1))
(assert (= city1 2))
(assert (= city2 3))
(assert (= city3 4))
(assert (= city4 5))
(assert (= city5 6))
(assert (= city6 7))
(assert (= person1 8))
(assert (= person2 9))
(assert (= person3 10))
(assert (= person4 11))
(assert (= person5 12))
(assert (= person6 13))
(assert (= (at plane1 0) city1))
(assert (= (capacity plane1 0) 6000))
(assert (= (fuel plane1 0) 6000))
(assert (= (seats plane1 0) 3))
(assert (= (onboard plane1 0) 0))
(assert (= (at person1 0) city1))
(assert (= (at person2 0) city2))
(assert (= (at person3 0) city1))
(assert (= (at person4 0) city3))
(assert (= (at person5 0) city4))
(assert (= (at person6 0) city5))
(assert (= (in person1 0) 0))
(assert (= (in person2 0) 0))
(assert (= (in person3 0) 0))
(assert (= (in person4 0) 0))
(assert (= (in person5 0) 0))
(assert (= (in person6 0) 0))
(assert (= (distance city1 city2 0) 899))
(assert (= (distance city1 city3 0) 529))
(assert (= (distance city1 city4 0) 649))
(assert (= (distance city1 city5 0) 456))
(assert (= (distance city1 city6 0) 123))
(assert (= (distance city2 city1 0) 899))
(assert (= (distance city2 city3 0) 722))
(assert (= (distance city2 city4 0) 341))
(assert (= (distance city2 city5 0) 789))
(assert (= (distance city2 city6 0) 321))
(assert (= (distance city3 city1 0) 529))
(assert (= (distance city3 city2 0) 722))
(assert (= (distance city3 city4 0) 663))
(assert (= (distance city3 city5 0) 546))
(assert (= (distance city3 city6 0) 965))
(assert (= (distance city4 city1 0) 649))
(assert (= (distance city4 city2 0) 341))
(assert (= (distance city4 city3 0) 663))
(assert (= (distance city4 city5 0) 324))
(assert (= (distance city4 city6 0) 671))
(assert (= (distance city5 city1 0) 456))
(assert (= (distance city5 city2 0) 789))
(assert (= (distance city5 city3 0) 546))
(assert (= (distance city5 city4 0) 324))
(assert (= (distance city5 city6 0) 333))
(assert (= (distance city6 city1 0) 123))
(assert (= (distance city6 city2 0) 321))
(assert (= (distance city6 city3 0) 965))
(assert (= (distance city6 city4 0) 671))
(assert (= (distance city6 city5 0) 333))
(assert (=> (board t0_0 t1_0 t2_0 0) (and (= (at t0_0 0) t2_0) (= (at t1_0 0) t2_0) (> (seats t1_0 0) (onboard t1_0 0)))) )
(assert (=> (debark t3_0 t4_0 t5_0 0) (and (= (in t3_0 0) t4_0) (= (at t4_0 0) t5_0))) )
(assert (=> (fly t6_0 t7_0 t8_0 0) (and (= (at t6_0 0) t7_0) (> (onboard t6_0 0) 0) (>= (fuel t6_0 0) (distance t7_0 t8_0 0)))) )
(assert (=> (refuel t9_0 0) (and (< (* (fuel t9_0 0) 2) (capacity t9_0 0)) (= (onboard t9_0 0) 0))) )
(assert (=> (and (board t0_0 t1_0 t2_0 0) true) (and (= (at t0_0 1) 0) (= (in t0_0 1) t1_0) (= (onboard t1_0 1) (+ (onboard t1_0 0) 1)))) )
(assert (=> (and (debark t3_0 t4_0 t5_0 0) true) (and (= (in t3_0 1) 0) (= (at t3_0 1) t5_0) (= (onboard t4_0 1) (- (onboard t4_0 0) 1)))) )
(assert (=> (and (fly t6_0 t7_0 t8_0 0) true) (and (= (at t6_0 1) t8_0) (= (fuel t6_0 1) (- (fuel t6_0 0) (distance t7_0 t8_0 0))))) )
(assert (=> (and (refuel t9_0 0) true) (and (= (fuel t9_0 1) (capacity t9_0 0)))) )
(assert (=> (distinct (at person1 0) (at person1 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person1) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person1) ) (and (fly t6_0 t7_0 t8_0 0)(= t6_0 person1) ) )) )
(assert (=> (distinct (at person2 0) (at person2 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person2) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person2) ) (and (fly t6_0 t7_0 t8_0 0)(= t6_0 person2) ) )) )
(assert (=> (distinct (at person3 0) (at person3 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person3) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person3) ) (and (fly t6_0 t7_0 t8_0 0)(= t6_0 person3) ) )) )
(assert (=> (distinct (at person4 0) (at person4 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person4) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person4) ) (and (fly t6_0 t7_0 t8_0 0)(= t6_0 person4) ) )) )
(assert (=> (distinct (at person5 0) (at person5 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person5) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person5) ) (and (fly t6_0 t7_0 t8_0 0)(= t6_0 person5) ) )) )
(assert (=> (distinct (at person6 0) (at person6 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person6) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person6) ) (and (fly t6_0 t7_0 t8_0 0)(= t6_0 person6) ) )) )
(assert (=> (distinct (at plane1 0) (at plane1 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 plane1) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 plane1) ) (and (fly t6_0 t7_0 t8_0 0)(= t6_0 plane1) ) )) )
(assert (= (capacity plane1 0) (capacity plane1 1)) )
(assert (= (distance city1 city2 0) (distance city1 city2 1)) )
(assert (= (distance city1 city3 0) (distance city1 city3 1)) )
(assert (= (distance city1 city4 0) (distance city1 city4 1)) )
(assert (= (distance city1 city5 0) (distance city1 city5 1)) )
(assert (= (distance city1 city6 0) (distance city1 city6 1)) )
(assert (= (distance city2 city1 0) (distance city2 city1 1)) )
(assert (= (distance city2 city3 0) (distance city2 city3 1)) )
(assert (= (distance city2 city4 0) (distance city2 city4 1)) )
(assert (= (distance city2 city5 0) (distance city2 city5 1)) )
(assert (= (distance city2 city6 0) (distance city2 city6 1)) )
(assert (= (distance city3 city1 0) (distance city3 city1 1)) )
(assert (= (distance city3 city2 0) (distance city3 city2 1)) )
(assert (= (distance city3 city4 0) (distance city3 city4 1)) )
(assert (= (distance city3 city5 0) (distance city3 city5 1)) )
(assert (= (distance city3 city6 0) (distance city3 city6 1)) )
(assert (= (distance city4 city1 0) (distance city4 city1 1)) )
(assert (= (distance city4 city2 0) (distance city4 city2 1)) )
(assert (= (distance city4 city3 0) (distance city4 city3 1)) )
(assert (= (distance city4 city5 0) (distance city4 city5 1)) )
(assert (= (distance city4 city6 0) (distance city4 city6 1)) )
(assert (= (distance city5 city1 0) (distance city5 city1 1)) )
(assert (= (distance city5 city2 0) (distance city5 city2 1)) )
(assert (= (distance city5 city3 0) (distance city5 city3 1)) )
(assert (= (distance city5 city4 0) (distance city5 city4 1)) )
(assert (= (distance city5 city6 0) (distance city5 city6 1)) )
(assert (= (distance city6 city1 0) (distance city6 city1 1)) )
(assert (= (distance city6 city2 0) (distance city6 city2 1)) )
(assert (= (distance city6 city3 0) (distance city6 city3 1)) )
(assert (= (distance city6 city4 0) (distance city6 city4 1)) )
(assert (= (distance city6 city5 0) (distance city6 city5 1)) )
(assert (=> (distinct (fuel plane1 0) (fuel plane1 1)) (or (and (fly t6_0 t7_0 t8_0 0)(= t6_0 plane1) ) (and (refuel t9_0 0)(= t9_0 plane1) ) )) )
(assert (=> (distinct (in person1 0) (in person1 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person1) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person1) ) )) )
(assert (=> (distinct (in person2 0) (in person2 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person2) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person2) ) )) )
(assert (=> (distinct (in person3 0) (in person3 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person3) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person3) ) )) )
(assert (=> (distinct (in person4 0) (in person4 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person4) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person4) ) )) )
(assert (=> (distinct (in person5 0) (in person5 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person5) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person5) ) )) )
(assert (=> (distinct (in person6 0) (in person6 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t0_0 person6) ) (and (debark t3_0 t4_0 t5_0 0)(= t3_0 person6) ) )) )
(assert (=> (distinct (onboard plane1 0) (onboard plane1 1)) (or (and (board t0_0 t1_0 t2_0 0)(= t1_0 plane1) ) (and (debark t3_0 t4_0 t5_0 0)(= t4_0 plane1) ) )) )
(assert (= (seats plane1 0) (seats plane1 1)) )
(assert (or (board t0_0 t1_0 t2_0 0) (debark t3_0 t4_0 t5_0 0) (fly t6_0 t7_0 t8_0 0) (refuel t9_0 0) ) )
(assert (or (not (board t0_0 t1_0 t2_0 0)) (not (debark t3_0 t4_0 t5_0 0))) )
(assert (or (not (board t0_0 t1_0 t2_0 0)) (not (fly t6_0 t7_0 t8_0 0))) )
(assert (or (not (board t0_0 t1_0 t2_0 0)) (not (refuel t9_0 0))) )
(assert (or (not (debark t3_0 t4_0 t5_0 0)) (not (fly t6_0 t7_0 t8_0 0))) )
(assert (or (not (debark t3_0 t4_0 t5_0 0)) (not (refuel t9_0 0))) )
(assert (or (not (fly t6_0 t7_0 t8_0 0)) (not (refuel t9_0 0))) )
(assert (and (= (at person1 1) city6) (= (at person2 1) city6) (= (at person3 1) city6) (= (at person4 1) city6) (= (at person5 1) city6) (= (at person6 1) city6)))
(check-sat)
